from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from config import CHANNEL_ID
from .gift_choice import choose_gift
from .fsm import UserState

router = Router()


@router.message(UserState.waiting_for_subscription, F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_subscription(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        member = await message.bot.get_chat_member(CHANNEL_ID, user_id)

        if member.status in ["member", "administrator", "creator"]:
            await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à üéÅ –ø–æ–¥–∞—Ä–æ–∫:")

            # ‚úÖ –í—ã–∑–æ–≤ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π `state`
            await choose_gift(message, state)

        else:
            await message.answer("üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
