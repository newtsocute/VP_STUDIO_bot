from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from .fsm import UserState

router = Router()

# ‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
AVAILABLE_GIFTS = ["üéÄ –ü–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è", "üí∏ 300‚ÇΩ –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É", "üé® 2000‚ÇΩ –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É"]

async def choose_gift(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞"""
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text=gift)] for gift in AVAILABLE_GIFTS]
    )

    await message.answer("üéÅ –ö–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ?", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_gift_choice)


@router.message(UserState.waiting_for_gift_choice)
async def handle_gift_choice(message: types.Message, state: FSMContext):
    gift_choice = message.text.strip()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if gift_choice not in AVAILABLE_GIFTS:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n–ï—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ —Å–≤–µ—Ä–Ω–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–≤–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ FSM
    await state.update_data(gift_choice=gift_choice)

    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())  # ‚ùå –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

    # ‚úÖ –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
    await state.set_state(UserState.waiting_for_name)
