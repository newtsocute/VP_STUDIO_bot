from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import aiosqlite
import re  # ‚úÖ –î–ª—è –ø–æ–∏—Å–∫–∞ URL –≤ —Ç–µ–∫—Å—Ç–µ
import logging  # ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from config import ADMIN_CHAT_IDS

router = Router()

# ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastState(StatesGroup):
    waiting_for_message = State()

@router.message(Command("broadcast"))
async def ask_broadcast_message(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞)"""
    chat_id = int(message.chat.id)
    expected_chat_id = int(ADMIN_CHAT_IDS)

    if chat_id != expected_chat_id:
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

    await message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                         "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π, —É–∫–∞–∂–∏—Ç–µ URL –≤ –∫–æ–Ω—Ü–µ.\n\n"
                         "–ü—Ä–∏–º–µ—Ä:\n"
                         "`üî• –°–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∏ 50%! https://example.com`",
                         parse_mode="Markdown")

    await state.set_state(BroadcastState.waiting_for_message)

@router.message(BroadcastState.waiting_for_message)
async def send_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É–¥–∞–ª—è–µ–º —Ç–µ—Ö, –∫—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"""
    await state.clear()

    text = message.text.strip()
    url_match = re.search(r"https?://\S+", text)
    url = url_match.group(0) if url_match else None
    text_without_url = text.replace(url, "").strip() if url else text

    reply_markup = (
        types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url=url)]]
        ) if url else None
    )

    sent_count = 0
    removed_count = 0  # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT user_id FROM users") as cursor:
            users = await cursor.fetchall()

            for user in users:
                user_id = user[0]
                try:
                    await bot.send_message(chat_id=user_id, text=text_without_url, reply_markup=reply_markup)
                    sent_count += 1
                except Exception as e:
                    error_text = str(e)
                    if "bot was blocked by the user" in error_text:
                        logging.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
                        await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
                        await db.commit()
                        removed_count += 1
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\nüóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã: {removed_count}.")
